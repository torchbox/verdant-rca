# -*- coding: utf-8 -*-
# Generated by Django 1.9.9 on 2017-06-28 15:31
from __future__ import unicode_literals

from django.db import migrations
from django.core.exceptions import ValidationError


# def change_schools_and_programmes(apps, schema_editor):
#     try:
#         _change_schools_and_programmes(apps, schema_editor)
#     except Exception as e:
#         print(str(e))
#         import pdb; pdb.set_trace()




def change_schools_and_programmes(apps, schema_editor):

    def specific(page, ct):
        return ct.objects.get(id=page.id)

    School = apps.get_model('taxonomy.School')
    Programme = apps.get_model('taxonomy.Programme')
    SchoolHistoricalDisplayName = apps.get_model('taxonomy.SchoolHistoricalDisplayName')

    ProgrammePage = apps.get_model('rca.ProgrammePage')
    ResearchItem = apps.get_model('rca.ResearchItem')
    JobPage = apps.get_model('rca.JobPage')
    SustainRCAProject = apps.get_model('rca.SustainRCAProject')
    RcaNowPage = apps.get_model('rca.RcaNowPage')
    RcaBlogPage = apps.get_model('rca.RcaBlogPage')
    EventItem = apps.get_model('rca.EventItem')
    NewsItem = apps.get_model('rca.NewsItem')
    PressRelease = apps.get_model('rca.PressRelease')
    EventItemRelatedSchool = apps.get_model('rca.EventItemRelatedSchool')
    NewsItemRelatedSchool = apps.get_model('rca.NewsItemRelatedSchool')
    PressReleaseRelatedSchool = apps.get_model('rca.PressReleaseRelatedSchool')
    StandardPage = apps.get_model('rca.StandardPage')
    StaffPageRole = apps.get_model('rca.StaffPageRole')
    LightBoxGalleryPageRelatedSchool = apps.get_model('rca.LightBoxGalleryPageRelatedSchool')

    # delete school that has been already added recently (we'll rename an existing one instead)
    School.objects.filter(slug='school-of-arts-and-humanities').delete()

    # rename fine art to the new art-and-humanities
    School.objects.filter(slug='schooloffineart').update(slug='school-of-arts-and-humanities', display_name='School of Arts & Humanities')

    # add historical display names
    school = School.objects.get(slug='school-of-arts-and-humanities')
    SchoolHistoricalDisplayName.objects.create(school=school, end_year=2017, display_name='School of Humanities')
    SchoolHistoricalDisplayName.objects.create(school=school, end_year=2017, display_name='School of Fine Art')

    # move programmes to art-and-humanities
    School.objects.get(slug='schoolofhumanities').programmes\
        .update(school=School.objects.get(slug='school-of-arts-and-humanities'))

    # move programmes to art-and-humanities
    School.objects.get(slug='schoolofmaterial').programmes\
        .filter(slug__in=['ceramicsglass', 'jewelleryandmetal'])\
        .update(school=School.objects.get(slug='school-of-arts-and-humanities'))

    # move programmes to design
    School.objects.get(slug='schoolofmaterial').programmes\
        .filter(slug__in=['textiles', 'fashionmenswear', 'fashionwomenswear'])\
        .update(school=School.objects.get(slug='schoolofdesign'))

    school_of_arts_and_humanities = School.objects.get(slug='school-of-arts-and-humanities')
    school_of_design = School.objects.get(slug='schoolofdesign')

    # --------------------------------
    # change school attribute of pages
    # --------------------------------

    # run update_unpublished_revsions with these IDs after the migration
    unpublished_pages = []

    def save(page, *args, **kwargs):
        print('/admin/pages/%d/edit/' % page.id)
        if page.has_unpublished_changes:
            if page.live:
                print('Publsihed page has unpublished changes. Udating published version only. Draft has to be updated manually.')
            else:
                unpublished_pages.append(page.id)

            try:
                page.save(*args, **kwargs)
            except ValidationError as e:
                print(str(e))

        else:
            try:
                page.save(*args, **kwargs)
            except ValidationError as e:
                print(str(e))
        print('\n')

    # ProgrammePage (school, related_programmes)
    print('ProgrammePage')
    for page in ProgrammePage.objects.filter(school__slug='schoolofhumanities'):
        page.school = school_of_arts_and_humanities
        save(page, update_fields=['school'])

    for page in ProgrammePage.objects.filter(school__slug='schoolofmaterial'):

        if page.programmes.filter(programme__slug__in=['ceramicsglass', 'jewelleryandmetal']).exists():
            page.school = school_of_arts_and_humanities
            save(page, update_fields=['school'])

        if page.programmes.filter(programme__slug__in=['textiles', 'fashionmenswear', 'fashionwomenswear']).exists():
            page.school = school_of_design
            save(page, update_fields=['school'])

    # ResearchItem (school, programme)
    # JobPage (school, programme)
    # SustainRCAProject (school, programme)
    # RcaNowPage (school, programme)
    for ct in [ResearchItem, JobPage, SustainRCAProject, RcaNowPage, RcaBlogPage]:
        print(ct.__name__)
        for page in ct.objects.filter(school__slug='schoolofhumanities'):
            page.school = school_of_arts_and_humanities
            save(page, update_fields=['school'])

        for page in ct.objects.filter(school__slug='schoolofmaterial'):

            if page.programme and page.programme.slug in ['ceramicsglass', 'jewelleryandmetal']:
                page.school = school_of_arts_and_humanities
                save(page, update_fields=['school'])

            if page.programme and page.programme.slug in ['textiles', 'fashionmenswear', 'fashionwomenswear']:
                page.school = school_of_design
                save(page, update_fields=['school'])

    # StandardPage (related_school [single], related_programme [single])
    for ct in [StandardPage]:
        print(ct.__name__)
        for page in ct.objects.filter(related_school__slug='schoolofhumanities'):
            page.related_school = school_of_arts_and_humanities
            save(page, update_fields=['related_school'])

        for page in ct.objects.filter(related_school__slug='schoolofmaterial'):

            if page.related_programme and page.related_programme.slug in ['ceramicsglass', 'jewelleryandmetal']:
                page.related_school = school_of_arts_and_humanities
                save(page, update_fields=['related_school'])

            if page.related_programme and page.related_programme.slug in ['textiles', 'fashionmenswear', 'fashionwomenswear']:
                page.related_school = school_of_design
                save(page, update_fields=['related_school'])

    # StaffPage: staff_roles.school, staff_roles.programme
    print('StaffPage')
    for role in StaffPageRole.objects.filter(school__slug='schoolofhumanities'):
        role.school = school_of_arts_and_humanities
        role.save(update_fields=['school'])
        save(role.page)

    for role in StaffPageRole.objects.filter(school__slug='schoolofmaterial'):

        if role.programme and role.programme.slug in ['ceramicsglass', 'jewelleryandmetal']:
            role.school = school_of_arts_and_humanities
            role.save(update_fields=['school'])
            save(role.page)

        if role.programme and role.programme.slug in ['textiles', 'fashionmenswear', 'fashionwomenswear']:
            role.school = school_of_design
            role.save(update_fields=['school'])
            save(role.page)

    # EventItem (related_schools, related_programmes)
    # NewsItem (related_schools, related_programmes)
    # PressRelease (related_schools, related_programmes)
    for (ct, ct_related_school) in [(EventItem, EventItemRelatedSchool), (NewsItem, NewsItemRelatedSchool), (PressRelease, PressReleaseRelatedSchool)]:
        print(ct.__name__)
        for page in ct.objects.filter(related_schools__school__slug='schoolofhumanities'):
            for related_school in page.related_schools.filter(school__slug='schoolofhumanities'):
                related_school.school = school_of_arts_and_humanities
                related_school.save(update_fields=['school'])
                save(page)

        for page in ct.objects.filter(related_schools__school__slug='schoolofmaterial'):

            if page.related_programmes.filter(programme__slug__in=['ceramicsglass', 'jewelleryandmetal']).exists():
                # we're only adding a new school here because there are multiple schools and programmes
                ct_related_school(page=specific(page, ct), school=school_of_arts_and_humanities)
                save(page)

            if page.related_programmes.filter(programme__slug__in=['textiles', 'fashionmenswear', 'fashionwomenswear']).exists():
                # we're only adding a new school here because there are multiple schools and programmes
                ct_related_school(page=specific(page, ct), school=school_of_design)
                save(page)

    # LightBoxGalleryPage has only related schools not programmes
    for related_school in LightBoxGalleryPageRelatedSchool.objects.filter(school__slug__in=['schoolofmaterial']):
        related_school.school = school_of_design
        related_school.save(update_fields=['school'])
        save(related_school.page)

    # --------------------------------

    # delete schools, making sure no related objects get cascade deleted
    assert School.objects.filter(slug='schoolofhumanities').delete()[0] == 1
    # assert School.objects.filter(slug='schoolofmaterial').delete()[0] == 1

    print("\nSchoolPages to be updated manually")
    print("\nRun update_unpublished_revsions() with the following IDs:")
    print(str(unpublished_pages))


def update_unpublished_revsions():
    from wagtail.wagtailcore.models import Page
    ids = []
    for page in Page.objects.filter(live=False, id__in=ids):
        print('/admin/pages/%d/edit/' % page.id)
        latest_revision = page.specific.get_latest_revision()
        if not latest_revision:
            continue
        try:
            new_revision = page.specific.save_revision(
                user=latest_revision.user,
                submitted_for_moderation=latest_revision.submitted_for_moderation,
                approved_go_live_at=latest_revision.approved_go_live_at,
            )
            latest_revision.submitted_for_moderation = False
            latest_revision.approved_go_live_at = None
            latest_revision.save(update_fields=['submitted_for_moderation', 'approved_go_live_at'])
        except Exception as e:
            print('/admin/pages/%d/edit/' % page.id)
            print(str(e))


def do_nothing(apps, schema_editor):
    pass  # Allows us to reverse this migration


class Migration(migrations.Migration):

    dependencies = [
        ('taxonomy', '0019_auto_20160901_1129'),
    ]

    operations = [
        # Do not need this migration anymore.
        # migrations.RunPython(change_schools_and_programmes, do_nothing),
    ]
